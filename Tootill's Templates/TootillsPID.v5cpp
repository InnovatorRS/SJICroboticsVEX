{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ndouble wheeltravel = 11;\n\ndouble trackwidth = 12;\n\ndouble wheelbase = 3.25;\n\n// Begin project code\nmotor right1 = motor(PORT2, true);\nmotor right2 = motor(PORT5, true);\nmotor right3 = motor(PORT3, false);\n\nmotor left1 = motor(PORT4, false);\nmotor left2 = motor(PORT1, false);\nmotor left3 = motor(PORT6, true);\n\nmotor_group leftside = motor_group(left1, left2, left3);\nmotor_group rightside = motor_group(right1, right2, right3);\n\nmotor intake = motor(PORT11, true);\nmotor chainMech = motor(PORT21, true);\n\n\ninertial inertial1 = inertial(PORT12);\n\n\nsmartdrive Drive = smartdrive(leftside, rightside, inertial1, wheeltravel, trackwidth, wheelbase, inches, 0.75);\n\n\nvoid pre_auton(void) {\n// Initializing Robot Configuration. DO NOT REMOVE!\nvexcodeInit();\n\n\n  // All activities that occur before the competition starts\n}\n\n//Tune Here\ndouble kp = 1.5;\ndouble ki = 1.0;\ndouble kd = 1.0;\ndouble turnkp = 0.0;\ndouble turnki = 0.0;\ndouble turnkd = 0.0;\ndouble circum = 10.21018;\n\n//Autonomous settings\nint desiredValue;\nint desiredturnValue;\n\n\nvoid ChassisDrive(double input){\n  desiredValue = input * circum;\n}\n\nvoid ChassisTurn(double input){\n desiredturnValue = input;\n}\n\n\n\nint error; //sensor value - disired value : positional value\nint previouserror = 0; // position 20 milliseconds ago\nint derivitive;  // difference between error and previous error : Speed\nint totalerror = 0; // totalerror = totalerror + error\n\n\nint turnerror; //sensor value - disired value : positional value\nint turnpreviouserror = 0; // position 20 milliseconds ago\nint turnderivitive;  // difference between error and previous error : Speed\nint turntotalerror = 0; // totalerror = totalerror + error\n\nbool resetdrivesensor = false;\n\n\n// variabels motified for use\n bool enabledrivepid = true;\n\nint drivepid(){\n  \n  while(enabledrivepid){\n    \n\n   if (resetdrivesensor) {\n      resetdrivesensor = false;\n      left2.setPosition(0, degrees);\n      right2.setPosition(0, degrees);\n    }\n\n    //get the position of both motors\n    int Leftmotorposition = left2.position(degrees);\n    int Rightmotorposition = right2.position(degrees);\n    \n\n\n    /////////////////////////////////////////////////////\n    // lateral movement pid\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // mean of the two variables\n    int averageposition = Leftmotorposition + Rightmotorposition/2;\n   \n    error = averageposition - desiredValue;\n\n    // derivitive\n    derivitive = error - previouserror;\n\n    //Intigral\n     //totalerror = error;\n\n    double lateralmotorPower = (error * kp + derivitive + kd + totalerror + ki) / 12.0;\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.print(desiredValue);\n    vex::task::sleep(3);\n    Brain.Screen.clearScreen();\n    //////////////////////////////////////////////////////////////////////////////////\n\n\n    /////////////////////////////////////////////////////\n    // turning movement pid\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    int turnDifference = Leftmotorposition - Rightmotorposition;\n   \n    turnerror = turnDifference - desiredturnValue;\n\n    // derivitive\n    turnderivitive = turnerror - turnpreviouserror;\n\n    //Intigral\n    //turntotalerror = turnerror;\n\n    double turnmotorPower = (turnerror * turnkp + turnderivitive + turnkd + turntotalerror + turnki) / 12.0;\n    //////////////////////////////////////////////////////////////////////////////////\n\n\n    /////////////////////////////////////////////////////////////////////////////////\n    leftside.spin(forward, lateralmotorPower + turnmotorPower, voltageUnits::volt);\n    rightside.spin(forward, lateralmotorPower - turnmotorPower, voltageUnits::volt);\n\n\n\n    //code\n    previouserror = error;\n    turnpreviouserror = turnerror;\n    vex::task::sleep(20);\n\n  }\n  \n  return 1;\n}\n\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n  while (true) {\n    wait(20, msec);\n    vex::task Tea(drivepid);\n\n    resetdrivesensor = true;\n    ChassisDrive(18);\n    ChassisTurn(90);\n\n    vex::task::sleep(100);\n  }\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  pre_auton();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","robotConfig":[],"slot":7,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}