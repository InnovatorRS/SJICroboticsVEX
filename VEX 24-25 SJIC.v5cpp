{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n#include \"math.h\"\n#include <cmath>\n\ncontroller Controller1 = controller(primary);\n\nmotor left1 = motor(PORT9, true);\nmotor left2 = motor(PORT15, true);\nmotor left3 = motor(PORT7);\n\nmotor right1 = motor(PORT10);\nmotor right2 = motor(PORT8);\nmotor right3 = motor(PORT3, true);\n\nmotor_group leftside = motor_group(left1, left2, left3);\nmotor_group rightside = motor_group(right1, right2, right3);\n\ninertial int1 = inertial(PORT1);\n\nsmartdrive Drive = smartdrive(leftside, rightside, int1);\n\n\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Begin project code\n\nvoid SetLeftDriveExpo (vex::directionType type, int percentage)\n{\n  if (percentage>=0)\n  {\n    // When stationary, or going forwards, put the percentage in the exponential function. \n    percentage = 1.2*pow(1.043, percentage) - 1.2 + 0.2 * percentage;\n  }\n  else\n  {\n    // When going in reverse, take the positive percentage, then put it in the exponential function.\n    percentage = -percentage;\n    percentage = 1.2*pow(1.043, percentage)-1.2+0.2*percentage;\n    // When a new percentage value is calculated, make it negative for backwards movement.\n  percentage = -percentage;\n  }\n\nleft1.spin (type, percentage, vex:: velocityUnits::pct);\nleft2.spin (type, percentage, vex:: velocityUnits::pct);\nleft3.spin (type, percentage, vex:: velocityUnits::pct);\n}\n\n\nvoid SetRightDriveExpo (vex::directionType type, int percentage)\n{\n  if (percentage>=0)\n  {\n    // When stationary, or going forwards, put the percentage in the exponential function. \n    percentage = 1.2*pow(1.043, percentage) - 1.2 + 0.2 * percentage;\n  }\n  else\n  {\n    // When going in reverse, take the positive percentage, then put it in the exponential function.\n    percentage = -percentage;\n    percentage = 1.2*pow(1.043, percentage)-1.2+0.2*percentage;\n    // When a new percentage value is calculated, make it negative for backwards movement.\n  percentage = -percentage;\n  }\n\nright1.spin (type, percentage, vex:: velocityUnits::pct);\nright2.spin (type, percentage, vex:: velocityUnits::pct);\nright3.spin (type, percentage, vex:: velocityUnits::pct);\n}\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  Drive.setHeading(0,degrees);\n  Drive.setDriveVelocity(50,percent);\n  Drive.setTurnVelocity(100,rpm);\n\n  wait(1, seconds);\n}\n\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n\n  Drive.setDriveVelocity(20,percent);\n  leftside.spinFor(forward, 75, degrees);\n  Drive.driveFor(forward, 8, inches);\n  rightside.spinFor(forward, 75, degrees);\n  Drive.driveFor(forward, 9, inches);\n  rightside.spinFor(forward, 250, degrees);\n  Drive.driveFor(forward, 8, inches);\n  wait(5, seconds);\n  Drive.driveFor(reverse, 5, inches);\n  leftside.spinFor(reverse, 70, degrees);\n  Drive.driveFor(forward, 8, inches);\n  leftside.spinFor(forward, 40, degrees);\n  Drive.driveFor(forward, 8, inches);\n  leftside.spinFor(forward, 50, degrees);\n  Drive.driveFor(forward, 6, inches);\n}\n\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  \n  while (true) {\n    //Move the robot\n    SetLeftDriveExpo (vex::directionType::fwd, Controller1.Axis3.position());\n    SetRightDriveExpo (vex::directionType::fwd, Controller1.Axis2.position());\n    \n    wait(20, msec);\n  }\n}\n\nint main() {\n  // create competition instance\n  competition Competition;\n  Brain.Screen.drawLine(0, 0, 10, 10);\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n\n    //Alex test comment\n    //rishi second comment\n  }\n}","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}