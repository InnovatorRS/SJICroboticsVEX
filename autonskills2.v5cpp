{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project: Complete Code // Include Arcade and Tank drives                                               \n//    Author: SJIC VEX Team\n//    Created: For The VEX SJIC Team\n//    Configuration: 6 Motor drive // Pnuematics // 2 Pistons\n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n#include \"math.h\"\n#include <cmath>\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n//Set Ports to Motors and Solenoids\n\ncontroller Controller1 = controller(primary);\n\nint wheelbase = 11;\nint trackwidth = 12;\ndouble wheeltravel = 3.25;\n\ndigital_out Solenoid = digital_out(Brain.ThreeWirePort.A);\n\nmotor left1 = motor(PORT6, false);\nmotor left2 = motor(PORT1, true);\nmotor left3 = motor(PORT4, true);\n\n\n\nmotor right1 = motor(PORT3, true);\nmotor right2 = motor(PORT5, false);\nmotor right3 = motor(PORT2, false);\n\nmotor_group leftside = motor_group(left1, left2, left3);\nmotor_group rightside = motor_group(right1, right2, right3);\n\n\n\ninertial inertial12 = inertial(PORT12);\n\nsmartdrive Drive = smartdrive(leftside, rightside, inertial12, wheelbase, wheeltravel, trackwidth, inches);\n\n\nmotor intake = motor(PORT11, true);\nmotor conveyor = motor(PORT21, true);\n\n//Create and set bool variables\n\nbool RIntakeActivated = false;\nbool IntakeActivated = false;\nbool PistonActivated = false;\nbool UseArcade = true;\n\n//Create and set float values\n\nfloat ConveyorSpeed = conveyor.velocity(rpm); \nfloat GoalConveyorSpeed = 185;\n\n// Begin project code\n\n\nint turningCurve = 5;\nbool turningRed = false;\n\nint forwardCurve = 10;\nbool forwardRed = false;\n\n//graph of red and blue lines from 5225A here\n//https://www.desmos.com/calculator/sdcgzah5ya\nint curveJoystick(bool red, int input, double t){\n  int val = 0;\n  if(red){\n    val = (std::exp(-t/10)+std::exp((std::abs(input)-100)/10)*(1-std::exp(-t/10))) * input;\n  }else{\n    //blue\n    val = std::exp(((std::abs(input)-100)*t)/1000) * input;\n  }\n  return val;\n}\n\n//Set The Left Drive to an Expenential Function\n/*void SetLeftDriveExpo (vex::directionType type, int percentage)\n{\n  if (percentage>=0)\n  {\n    // When stationary, or going forwards, put the percentage in the exponential function. \n    percentage = 1.2*pow(1.043, percentage) - 1.2 + 0.2 * percentage;\n  }\n  else\n  {\n    // When going in reverse, take the positive percentage, then put it in the exponential function.\n    percentage = -percentage;\n    percentage = 1.2*pow(1.043, percentage)-1.2+0.2*percentage;\n    // When a new percentage value is calculated, make it negative for backwards movement.\n    percentage = -percentage;\n  }\n\n  left1.spin (type, percentage, vex:: velocityUnits::pct);\n  left2.spin (type, percentage, vex:: velocityUnits::pct);\n  left3.spin (type, percentage, vex:: velocityUnits::pct);\n}*/\n\n//Set The Right Drive to an Expenential Function\n/*void SetRightDriveExpo (vex::directionType type, int percentage)\n{\n  if (percentage>=0)\n  {\n    // When stationary, or going forwards, put the percentage in the exponential function. \n    percentage = 1.2*pow(1.043, percentage) - 1.2 + 0.2 * percentage;\n  }\n  else\n  {\n    // When going in reverse, take the positive percentage, then put it in the exponential function.\n    percentage = -percentage;\n    percentage = 1.2*pow(1.043, percentage)-1.2+0.2*percentage;\n    // When a new percentage value is calculated, make it negative for backwards movement.\n    percentage = -percentage;\n  }\n\n  right1.spin (type, percentage, vex:: velocityUnits::pct);\n  right2.spin (type, percentage, vex:: velocityUnits::pct);\n  right3.spin (type, percentage, vex:: velocityUnits::pct);\n}*/\n\n\n//Create A Function Where the Robot will Drive in Arcade\nvoid Arcade() { \n  double turnVal = curveJoystick(false, Controller1.Axis1.position(percent), turningCurve); //Get curvature according to settings [-100,100]\n    double forwardVal = curveJoystick(false, Controller1.Axis3.position(percent), forwardCurve); //Get curvature according to settings [-100,100]\n\n    double turnVolts = turnVal * 0.12; //Converts to voltage\n    double forwardVolts = forwardVal * 0.12; //Converts to voltage\n\n    leftside.spin(forward, forwardVolts + turnVolts, voltageUnits::volt); //Apply Via Voltage\n    rightside.spin(forward, forwardVolts - turnVolts, voltageUnits::volt);\n} \n\n//Create A Function Where the Robot will Drive in Tank\nvoid Tank() { \n    double turnVal = curveJoystick(false, Controller1.Axis2.position(percent), turningCurve); //Get curvature according to settings [-100,100]\n    double forwardVal = curveJoystick(false, Controller1.Axis3.position(percent), forwardCurve); //Get curvature according to settings [-100,100]\n\n    double turnVolts = turnVal * 0.12; //Converts to voltage\n    double forwardVolts = forwardVal * 0.12; //Converts to voltage\n\n    leftside.spin(forward, forwardVolts, voltageUnits::volt); //Apply Via Voltage\n    rightside.spin(forward, turnVolts, voltageUnits::volt);\n}\n\n/*\nvoid SolenoidTrue() {\n  Solenoid.set(true);\n  wait(0.5, seconds);\n  PistonActivated = true;\n}\n*/\n\n/*\nvoid SolenoidFalse() {\n  Solenoid.set(false);\n  wait(0.5, seconds);\n  PistonActivated = false;\n}\n*/\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();                                                                                                                                                            \n  Drive.setDriveVelocity(25, percent);\n  Drive.setTurnVelocity(100,rpm);\n  intake.setVelocity(140, rpm);\n  conveyor.setVelocity(GoalConveyorSpeed, rpm);\n  wait(1, seconds);\n}\n\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n  inertial12.calibrate();\n  wait(1, sec);\n  Drive.setDriveVelocity(60, percent);\n  conveyor.spinFor(forward, 1.5, seconds);\n  conveyor.spinFor(reverse, 1.7, seconds);\n  Drive.driveFor(forward, 9, inches);\n  Drive.turnFor(left, 90, degrees);\n  Drive.driveFor(reverse, 36, inches); \n  Drive.turnFor(right, 45, degrees);\n  Drive.driveFor(reverse,18, inches);\n  Drive.driveFor(forward,12,inches);\n  Drive.turnFor(right, 135, degrees);\n}\n\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  \n  while (true) {\n    //Pressing Y Changes from Arcade to Tank and Vice Versa\n    if (Controller1.ButtonY.pressing()) { \n      UseArcade = !UseArcade; \n      waitUntil(!Controller1.ButtonY.pressing()); \n    }\n    if (UseArcade) { \n      Arcade(); \n    } \n    else {  \n      Tank(); \n    }\n    //Code the pneumatics\n    if(Controller1.ButtonL1.pressing() &&  PistonActivated == false){\n      Solenoid.set(true);\n      PistonActivated = true;\n      wait(0.5, seconds);\n    }else if(Controller1.ButtonL1.pressing() && PistonActivated == true){\n      Solenoid.set(false);\n      PistonActivated = false;\n      wait(0.5, seconds);\n    }\n\n    //Code the Conveyor\n    if(Controller1.ButtonR1.pressing() && IntakeActivated == false) {\n      conveyor.spin(forward);\n      intake.spin(forward);\n      wait(0.5, seconds);\n      IntakeActivated = true;\n    } \n    else if (Controller1.ButtonR1.pressing() && IntakeActivated == true) {\n      conveyor.stop();\n      intake.stop();\n      wait(0.5, seconds);\n      IntakeActivated = false;\n    }\n    \n    //Code the Conveyor in reverse\n    else if (Controller1.ButtonR2.pressing() && RIntakeActivated == false) {\n      conveyor.spin(reverse);\n      intake.spin(reverse);\n      wait(0.5, seconds);\n      RIntakeActivated = true;\n    } \n    else if (Controller1.ButtonR2.pressing() && RIntakeActivated == true){\n      conveyor.stop();\n      intake.stop();\n      wait(0.5, seconds);\n      RIntakeActivated = false;\n    }\n    \n    if (conveyor.velocity(rpm) != ConveyorSpeed) {\n      Brain.Screen.setCursor(2,2);\n      Brain.Screen.clearLine(2);\n      Brain.Screen.print(conveyor.velocity(rpm));\n      ConveyorSpeed = conveyor.velocity(rpm);\n    }\n\n    if (Controller1.ButtonUp.pressing()) {\n      GoalConveyorSpeed += 5;\n      conveyor.setVelocity(GoalConveyorSpeed, rpm);\n      Brain.Screen.clearLine(3);\n      Brain.Screen.setCursor(3,2);\n      Brain.Screen.print(GoalConveyorSpeed);\n      wait(1,seconds);\n    }\n    if (Controller1.ButtonDown.pressing()) {\n      GoalConveyorSpeed -= 5;\n      conveyor.setVelocity(GoalConveyorSpeed, rpm);\n      Brain.Screen.clearLine(3);\n      Brain.Screen.setCursor(3,2);\n      Brain.Screen.print(GoalConveyorSpeed);\n      wait(0.5, seconds);\n    }\n\n    wait(1000/60, msec);\n\n  }\n}  \nint main() {\n  // create competition instance\n  competition Competition;\n  Brain.Screen.drawLine(0, 0, 10, 10);\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","robotConfig":[],"slot":2,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}